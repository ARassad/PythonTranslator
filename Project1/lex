%{
#include <stdio.h>
#include <stdlib.h>
void calcIndentation(int* indentStack, int* indexTop, int len);
%}
%option noyywrap
%option never-interactive
%x ONECOMMENT
%x STRING
%x COMMENT
%x CCOMMENT
%x HEXDECIMAL
%%

%{
	int indexTop = 0;
	int indentStack[1000];
	indentStack[0] = 0;
	char buffer[1000];
	char comment[1000];
	comment[0] = 0;
%}

#	{comment[0] = 0; BEGIN(ONECOMMENT);}
<ONECOMMENT>[^\/\n] strcat(comment, yytext);
<ONECOMMENT>[\/\n]	{printf("COMMENT : %s\n", comment); BEGIN(INITIAL);}

\"\"\"			{BEGIN(COMMENT);}
<COMMENT>[^\"{3}] 
<COMMENT>\"{3}	{BEGIN(INITIAL);}
\'{3}		{BEGIN(CCOMMENT);}
<CCOMMENT>[^\'{3}]
<CCOMMENT>\'{3}	{BEGIN(INITIAL);}

^[ ]+		calcIndentation(indentStack, &indexTop, strlen(yytext));
^[\t]+		calcIndentation(indentStack, &indexTop, strlen(yytext)*4);
^[ \t]{2,}	printf("Error mixing tab and spacers\n");

\"				{BEGIN(STRING);buffer[0] = 0;}
<STRING>\\n		strcat(buffer,"\n");
<STRING>\\\"	strcat(buffer,"\"");
<STRING>\\\\	strcat(buffer,"\\");
<STRING>\\\'	strcat(buffer,"\'");
<STRING>\'		strcat(buffer,"\'");
<STRING>\\newline
<STRING>\\a		strcat(buffer,"\a");
<STRING>\\b		strcat(buffer,"\b");
<STRING>\\f		strcat(buffer,"\f");
<STRING>\\r		strcat(buffer,"\r");
<STRING>\\t		strcat(buffer,"\t");
<STRING>\\v		strcat(buffer,"\v");
<STRING>\\x		{BEGIN(HEXDECIMAL);}
<HEXDECIMAL>[0-9]+	{strcat(buffer, yytext); BEGIN(STRING);}
<STRING>[^\"\\\n\'\a\b\f\r\t\v]+		strcat(buffer,yytext);
<STRING>\" 		{printf("String literal %s\n",buffer); BEGIN(INITIAL);}

False    	printf("Keyword : %s\n", yytext);
if     	 	printf("Keyword : %s\n", yytext);
import     	printf("Keyword : %s\n", yytext);
from     	printf("Keyword : %s\n", yytext);
in     		printf("Keyword : %s\n", yytext);
is     		printf("Keyword : %s\n", yytext);
as     		printf("Keyword : %s\n", yytext);
lambda     	printf("Keyword : %s\n", yytext);
not     	printf("Keyword : %s\n", yytext);
or     		printf("Keyword : %s\n", yytext);
pass     	printf("Keyword : %s\n", yytext);
raise     	printf("Keyword : %s\n", yytext);
return     	printf("Keyword : %s\n", yytext);
try     	printf("Keyword : %s\n", yytext);
while     	printf("Keyword : %s\n", yytext);
with     	printf("Keyword : %s\n", yytext);
None     	printf("Keyword : %s\n", yytext);
True     	printf("Keyword : %s\n", yytext);
and     	printf("Keyword : %s\n", yytext);
assert     	printf("Keyword : %s\n", yytext);
break     	printf("Keyword : %s\n", yytext);
class     	printf("Keyword : %s\n", yytext);
continue    printf("Keyword : %s\n", yytext);
def     	printf("Keyword : %s\n", yytext);
elif     	printf("Keyword : %s\n", yytext);
else     	printf("Keyword : %s\n", yytext);
except     	printf("Keyword : %s\n", yytext);
finally     printf("Keyword : %s\n", yytext);
\+    		printf("Oper : %s\n", yytext);
-     		printf("Oper : %s\n", yytext);
\*     		printf("Oper : %s\n", yytext);
\*\*     	printf("Oper : %s\n", yytext);
\/     		printf("Oper : %s\n", yytext);
\/\/     	printf("Oper : %s\n", yytext);
\%    		printf("Oper : %s\n", yytext);
@     		printf("Oper : %s\n", yytext);
\<\<     	printf("Oper : %s\n", yytext);
>>     		printf("Oper : %s\n", yytext);
&     		printf("Oper : %s\n", yytext);
\|     		printf("Oper : %s\n", yytext);
\^    		printf("Oper : %s\n", yytext);
~     		printf("Oper : %s\n", yytext);
>     		printf("Oper : %s\n", yytext);
\<     		printf("Oper : %s\n", yytext);
\<=     	printf("Oper : %s\n", yytext);
\>=     	printf("Oper : %s\n", yytext);
==    		printf("Oper : %s\n", yytext);
!=     		printf("Oper : %s\n", yytext);
\(     		printf("Oper : %s\n", yytext);
\)     		printf("Oper : %s\n", yytext);
\[     		printf("Oper : %s\n", yytext);
\]     		printf("Oper : %s\n", yytext);
\{    		printf("Oper : %s\n", yytext);
\}     		printf("Oper : %s\n", yytext);
,     		printf("Oper : %s\n", yytext);
:     		printf("Oper : %s\n", yytext);
\.     		printf("Oper : %s\n", yytext);
\;     		printf("Oper : %s\n", yytext);
\=    		printf("Oper : %s\n", yytext);
->     		printf("Oper : %s\n", yytext);
\+=     	printf("Oper : %s\n", yytext);
-=     		printf("Oper : %s\n", yytext);
\*=     	printf("Oper : %s\n", yytext);
\/=     	printf("Oper : %s\n", yytext);
\/\/=    	printf("Oper : %s\n", yytext);
%=     		printf("Oper : %s\n", yytext);
@=     		printf("Oper : %s\n", yytext);
\&=     	printf("Oper : %s\n", yytext);
\|=     	printf("Oper : %s\n", yytext);
\^=     	printf("Oper : %s\n", yytext);
>>=     	printf("Oper : %s\n", yytext);
\<\<=   	printf("Oper : %s\n", yytext);
\*\*=     	printf("Oper : %s\n", yytext);

[0-9]*([0-9]\.|\.[0-9])[0-9]* printf("Float : %f\n", atof(yytext));
[0-9]+ 		printf("Number : %d\n", atoi(yytext));
[A-Za-z_][A-Za-z0-9_]*	printf("Identifier : %s\n", yytext);
%%

void calcIndentation(int* indentStack, int* indexTop, int len)
{
	if( len > indentStack[*indexTop] )
	{
		(*indexTop)++;
		indentStack[*indexTop] = len;
		printf("INDENT : %d\n", len);
	}
	else if( len < indentStack[*indexTop])
	{
		int dedentCount = *indexTop;
		while(len < indentStack[dedentCount])
			dedentCount--;
			
		if (len != indentStack[dedentCount])
			printf("Error: inconsistent dedent %d\n", len);
		else
		{
			while(*indexTop > dedentCount)
			{
				printf("DEDENT : %d\n", indentStack[*indexTop]);
				(*indexTop)--;
			}
		}
	}		
}

int main(int argc, char *argv[])
{
	yyin = fopen(argv[1], "r");
	yylex();
	return 0;
}