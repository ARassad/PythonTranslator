%{
#include <stdio.h>
#include <stdlib.h>
%}

%option noyywrap
%option never-interactive

%%
%{
	int indexTop = 0;
	int indentStack[1000];
	indentStack[0] = 0;
%}

^[ ]+		{
				int len = strlen(yytext);
				if( len > indentStack[indexTop] )
				{
					indexTop++;
					indentStack[indexTop] = len;
					printf("INDENT : %d\n", len);
				}
				else if( len < indentStack[indexTop])
				{
					while(len < indentStack[indexTop])
						indexTop--;
						
					if (len != indentStack[indexTop])
						printf("Error: inconsistent dedent %d\n", len);
					else
						printf("DEDENT : %d\n", len);
				}		
			}
False    	printf("Key : %s\n", yytext);
if     	 	printf("Key : %s\n", yytext);
import     	printf("Key : %s\n", yytext);
from     	printf("Key : %s\n", yytext);
in     		printf("Key : %s\n", yytext);
is     		printf("Key : %s\n", yytext);
as     		printf("Key : %s\n", yytext);
lambda     	printf("Key : %s\n", yytext);
not     	printf("Key : %s\n", yytext);
or     		printf("Key : %s\n", yytext);
pass     	printf("Key : %s\n", yytext);
raise     	printf("Key : %s\n", yytext);
return     	printf("Key : %s\n", yytext);
try     	printf("Key : %s\n", yytext);
while     	printf("Key : %s\n", yytext);
with     	printf("Key : %s\n", yytext);
None     	printf("Key : %s\n", yytext);
True     	printf("Key : %s\n", yytext);
and     	printf("Key : %s\n", yytext);
assert     	printf("Key : %s\n", yytext);
break     	printf("Key : %s\n", yytext);
class     	printf("Key : %s\n", yytext);
continue    printf("Key : %s\n", yytext);
def     	printf("Key : %s\n", yytext);
elif     	printf("Key : %s\n", yytext);
else     	printf("Key : %s\n", yytext);
except     	printf("Key : %s\n", yytext);
finally     printf("Key : %s\n", yytext);

\+    		printf("Oper : %s\n", yytext);
-     		printf("Oper : %s\n", yytext);
\*     		printf("Oper : %s\n", yytext);
\*\*     	printf("Oper : %s\n", yytext);
\/     		printf("Oper : %s\n", yytext);
\/\/     	printf("Oper : %s\n", yytext);
\%    		printf("Oper : %s\n", yytext);
@     		printf("Oper : %s\n", yytext);
\<\<     	printf("Oper : %s\n", yytext);
>>     		printf("Oper : %s\n", yytext);
&     		printf("Oper : %s\n", yytext);
\|     		printf("Oper : %s\n", yytext);
\^    		printf("Oper : %s\n", yytext);
~     		printf("Oper : %s\n", yytext);
>     		printf("Oper : %s\n", yytext);
\<     		printf("Oper : %s\n", yytext);
\<=     	printf("Oper : %s\n", yytext);
\>=     	printf("Oper : %s\n", yytext);
==    		printf("Oper : %s\n", yytext);
!=     		printf("Oper : %s\n", yytext);
\(     		printf("Oper : %s\n", yytext);
\)     		printf("Oper : %s\n", yytext);
\[     		printf("Oper : %s\n", yytext);
\]     		printf("Oper : %s\n", yytext);
\{    		printf("Oper : %s\n", yytext);
\}     		printf("Oper : %s\n", yytext);
,     		printf("Oper : %s\n", yytext);
:     		printf("Oper : %s\n", yytext);
\.     		printf("Oper : %s\n", yytext);
\;     		printf("Oper : %s\n", yytext);
\=    		printf("Oper : %s\n", yytext);
->     		printf("Oper : %s\n", yytext);
\+=     	printf("Oper : %s\n", yytext);
-=     		printf("Oper : %s\n", yytext);
\*=     	printf("Oper : %s\n", yytext);
\/=     	printf("Oper : %s\n", yytext);
\/\/=    	printf("Oper : %s\n", yytext);
%=     		printf("Oper : %s\n", yytext);
@=     		printf("Oper : %s\n", yytext);
\&=     	printf("Oper : %s\n", yytext);
\|=     	printf("Oper : %s\n", yytext);
\^=     	printf("Oper : %s\n", yytext);
>>=     	printf("Oper : %s\n", yytext);
\<\<=   	printf("Oper : %s\n", yytext);
\*\*=     	printf("Oper : %s\n", yytext);

[0-9]*([0-9]\.|\.[0-9])[0-9]* printf("Float : %f\n", atof(yytext));
[0-9]+ 		printf("Number : %d\n", atoi(yytext));
[A-Za-z_][A-Za-z0-9_]*	printf("Identifier : %s\n", yytext);
%%

int main(int argc, char *argv[])
{
	yyin = fopen(argv[1], "r");
	yylex();
	return 0;
}
