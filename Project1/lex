%{
#include <stdio.h>
#include <stdlib.h>
void calcIndentation(int* indentStack, int* indexTop, int len);
%}
%option noyywrap
%option never-interactive
%option yylineno
%x ONECOMMENT
%x STRING
%x COMMENT
%x CCOMMENT
%x HEXDECIMAL
%x HEXDECIMALC
%x HEXDECIMALCC
%x HEXDECIMALCCC
%x STRINGS
%x DEDENT0
%%

%{
	int indexTop = 0;
	int indentStack[1000];
	indentStack[0] = 0;
	char buffer[1000];
	char comment[1000];
	comment[0] = 0;
	
	int parenthesesOpenCount = 0;
	int squarebracketsOpenCount = 0;
	int curlybracesOpenCount = 0;
	int isLogicalString = 0;
%}

^\s*\n			printf("EMPTYSTRING\n");

#	{comment[0] = 0; BEGIN(ONECOMMENT);}
<ONECOMMENT>[^\/\n] strcat(comment, yytext);
<ONECOMMENT>[\/\n]	{printf("COMMENT(%s)\n", comment); BEGIN(DEDENT0);}

\"\"\"			{BEGIN(COMMENT);}
<COMMENT>\\n		strcat(buffer,"\n");
<COMMENT>\\\"	strcat(buffer,"\"");
<COMMENT>\\\\	strcat(buffer,"\\");
<COMMENT>\\\'	strcat(buffer,"\'");
<COMMENT>\'		strcat(buffer,"\'");
<COMMENT>\\newline
<COMMENT>\\a		strcat(buffer,"\a");
<COMMENT>\\b		strcat(buffer,"\b");
<COMMENT>\\f		strcat(buffer,"\f");
<COMMENT>\\r		strcat(buffer,"\r");
<COMMENT>\\t		strcat(buffer,"\t");
<COMMENT>\\v		strcat(buffer,"\v");
<COMMENT>\\x		{BEGIN(HEXDECIMALC);}
<HEXDECIMALC>[0-9]+	{strcat(buffer, yytext); BEGIN(COMMENT);}
<COMMENT>[^\"\\\n\'\a\b\f\r\t\v]+		strcat(buffer,yytext);
<COMMENT>\"\"\" 		{printf("COMMENT literal(%s)\n",buffer); BEGIN(INITIAL);}

\'{3}		{BEGIN(CCOMMENT);}
<CCOMMENT>\\n		strcat(buffer,"\n");
<CCOMMENT>\\\"	strcat(buffer,"\"");
<CCOMMENT>\\\\	strcat(buffer,"\\");
<CCOMMENT>\\\'	strcat(buffer,"\'");
<CCOMMENT>\'		strcat(buffer,"\'");
<CCOMMENT>\\newline
<CCOMMENT>\\a		strcat(buffer,"\a");
<CCOMMENT>\\b		strcat(buffer,"\b");
<CCOMMENT>\\f		strcat(buffer,"\f");
<CCOMMENT>\\r		strcat(buffer,"\r");
<CCOMMENT>\\t		strcat(buffer,"\t");
<CCOMMENT>\\v		strcat(buffer,"\v");
<CCOMMENT>\\x		{BEGIN(HEXDECIMALC);}
<HEXDECIMALCC>[0-9]+	{strcat(buffer, yytext); BEGIN(CCOMMENT);}
<CCOMMENT>[^\"\\\n\'\a\b\f\r\t\v]+		strcat(buffer,yytext);
<CCOMMENT>\'\'\' 		{printf("COMMENT literal(%s)\n",buffer); BEGIN(INITIAL);}

<DEDENT0>^[ \t]*#		{comment[0] = 0; BEGIN(ONECOMMENT);}
<DEDENT0>^[ \t]*\n			printf("EMPTYSTRING\n");
<DEDENT0>^[ ]+  {
				if( !(isLogicalString || parenthesesOpenCount || squarebracketsOpenCount || curlybracesOpenCount))
				{
					calcIndentation(indentStack, &indexTop, strlen(yytext));
					BEGIN(INITIAL);
				}
			}
<DEDENT0>^[\t]+		{
				if( !(isLogicalString || parenthesesOpenCount || squarebracketsOpenCount || curlybracesOpenCount))
				{
					calcIndentation(indentStack, &indexTop, strlen(yytext)*4);
					BEGIN(INITIAL);
				}
			}
<DEDENT0>^[ \t]{2,}	{
				if( !(isLogicalString || parenthesesOpenCount || squarebracketsOpenCount || curlybracesOpenCount))
				{
					printf("Error mixing tab and spacers on line %d\n", yylineno);
				}
			}
<DEDENT0>""/. {
				if( !(isLogicalString || parenthesesOpenCount || squarebracketsOpenCount || curlybracesOpenCount))
				{
					calcIndentation(indentStack, &indexTop, 0);
					BEGIN(INITIAL);
				}
			}

\"				{BEGIN(STRING);buffer[0] = 0;}
<STRING>\n		{printf("Error in string %d - String literal not closed\n",yylineno);BEGIN(INITIAL);}
<STRING>\\n		strcat(buffer,"\n");
<STRING>\\\"	strcat(buffer,"\"");
<STRING>\\\\	strcat(buffer,"\\");
<STRING>\\\'	strcat(buffer,"\'");
<STRING>\'		strcat(buffer,"\'");
<STRING>\\newline
<STRING>\\a		strcat(buffer,"\a");
<STRING>\\b		strcat(buffer,"\b");
<STRING>\\f		strcat(buffer,"\f");
<STRING>\\r		strcat(buffer,"\r");
<STRING>\\t		strcat(buffer,"\t");
<STRING>\\v		strcat(buffer,"\v");
<STRING>\\x		{BEGIN(HEXDECIMAL);}
<HEXDECIMAL>[0-9]+	{strcat(buffer, yytext); BEGIN(STRING);}
<STRING>[^\"\\\n\'\a\b\f\r\t\v]+		strcat(buffer,yytext);
<STRING>\" 		{printf("String literal(%s)\n",buffer); BEGIN(INITIAL);}

\'				{BEGIN(STRINGS);buffer[0] = 0;}
<STRINGS>\n		{printf("Error in string %d - String literal not closed\n",yylineno);BEGIN(INITIAL);}
<STRINGS>\\n	strcat(buffer,"\n");
<STRINGS>\\\"	strcat(buffer,"\"");
<STRINGS>\\\\	strcat(buffer,"\\");
<STRINGS>\\\'	strcat(buffer,"\'");
<STRINGS>\"		strcat(buffer,"\'");
<STRINGS>\\newline
<STRINGS>\\a		strcat(buffer,"\a");
<STRINGS>\\b		strcat(buffer,"\b");
<STRINGS>\\f		strcat(buffer,"\f");
<STRINGS>\\r		strcat(buffer,"\r");
<STRINGS>\\t		strcat(buffer,"\t");
<STRINGS>\\v		strcat(buffer,"\v");
<STRINGS>\\x		{BEGIN(HEXDECIMALCCC);}
<HEXDECIMALCCC>[0-9]+	{strcat(buffer, yytext); BEGIN(STRINGS);}
<STRINGS>[^\"\\\n\'\a\b\f\r\t\v]+		strcat(buffer,yytext);
<STRINGS>\' 		{printf("String literal(%s)\n",buffer); BEGIN(INITIAL);}

False    	printf("Keyword(%s)\n", yytext);
if     	 	printf("Keyword(%s)\n", yytext);
import     	printf("Keyword(%s)\n", yytext);
from     	printf("Keyword(%s)\n", yytext);
in     		printf("Keyword(%s)\n", yytext);
is     		printf("Keyword(%s)\n", yytext);
as     		printf("Keyword(%s)\n", yytext);
lambda     	printf("Keyword(%s)\n", yytext);
not     	printf("Keyword(%s)\n", yytext);
or     		printf("Keyword(%s)\n", yytext);
pass     	printf("Keyword(%s)\n", yytext);
raise     	printf("Keyword(%s)\n", yytext);
return     	printf("Keyword(%s)\n", yytext);
try     	printf("Keyword(%s)\n", yytext);
while     	printf("Keyword(%s)\n", yytext);
with     	printf("Keyword(%s)\n", yytext);
None     	printf("Keyword(%s)\n", yytext);
True     	printf("Keyword(%s)\n", yytext);
and     	printf("Keyword(%s)\n", yytext);
assert     	printf("Keyword(%s)\n", yytext);
break     	printf("Keyword(%s)\n", yytext);
class     	printf("Keyword(%s)\n", yytext);
continue    printf("Keyword(%s)\n", yytext);
def     	printf("Keyword(%s)\n", yytext);
elif     	printf("Keyword(%s)\n", yytext);
else     	printf("Keyword(%s)\n", yytext);
except     	printf("Keyword(%s)\n", yytext);
finally     printf("Keyword(%s)\n", yytext);
yield		printf("Keyword(%s)\n", yytext);
\+    		printf("Operator(%s)\n", yytext);
-     		printf("Operator(%s)\n", yytext);
\*     		printf("Operator(%s)\n", yytext);
\*\*     	printf("Operator(%s)\n", yytext);
\/     		printf("Operator(%s)\n", yytext);
\/\/     	printf("Operator(%s)\n", yytext);
\%    		printf("Operator(%s)\n", yytext);
@     		printf("Operator(%s)\n", yytext);
\<\<     	printf("Operator(%s)\n", yytext);
>>     		printf("Operator(%s)\n", yytext);
&   		printf("Operator(%s)\n", yytext);
\|     		printf("Operator(%s)\n", yytext);
\^    		printf("Operator(%s)\n", yytext);
~     		printf("Operator(%s)\n", yytext);
>     		printf("Operator(%s)\n", yytext);
\<     		printf("Operator(%s)\n", yytext);
\<=     	printf("Operator(%s)\n", yytext);
\>=     	printf("Operator(%s)\n", yytext);
==    		printf("Operator(%s)\n", yytext);
!=     		printf("Operator(%s)\n", yytext);
\(     		{printf("Operator(%s)\n", yytext); parenthesesOpenCount++;}
\)     		{printf("Operator(%s)\n", yytext); parenthesesOpenCount--;}
\[     		{printf("Operator(%s)\n", yytext); squarebracketsOpenCount++;}
\]     		{printf("Operator(%s)\n", yytext); squarebracketsOpenCount--;}
\{    		{printf("Operator(%s)\n", yytext); curlybracesOpenCount++;}
\}     		{printf("Operator(%s)\n", yytext); curlybracesOpenCount--;}
,     		printf("Operator(%s)\n", yytext);
:     		printf("Operator(%s)\n", yytext);
\.     		printf("Operator(%s)\n", yytext);
\;     		printf("Operator(%s)\n", yytext);
\=    		printf("Operator(%s)\n", yytext);
->     		printf("Operator(%s)\n", yytext);
\+=     	printf("Operator(%s)\n", yytext);
-=     		printf("Operator(%s)\n", yytext);
\*=     	printf("Operator(%s)\n", yytext);
\/=     	printf("Operator(%s)\n", yytext);
\/\/=    	printf("Operator(%s)\n", yytext);
%=     		printf("Operator(%s)\n", yytext);
@=     		printf("Operator(%s)\n", yytext);
\&=     	printf("Operator(%s)\n", yytext);
\|=     	printf("Operator(%s)\n", yytext);
\^=     	printf("Operator(%s)\n", yytext);
>>=     	printf("Operator(%s)\n", yytext);
\<\<=   	printf("Operator(%s)\n", yytext);
\*\*=     	printf("Operator(%s)\n", yytext);

[0-9]*([0-9]\.|\.[0-9])[0-9]* printf("Float(%f)\n", atof(yytext));
[0-9]+ 		printf("Number(%d)\n", atoi(yytext));
[A-Za-z_][A-Za-z0-9_]*	printf("Identifier(%s)\n", yytext);

\\\s*\n		{printf("BACKSLASH CONCATINATE FISICAL STRINGS TO LOGICAL STRING\n"); isLogicalString = 1;}
\n 			{
				if( parenthesesOpenCount == 0 && squarebracketsOpenCount == 0 && curlybracesOpenCount == 0)
				{
					printf("NEWLINE\n");
					isLogicalString = 0;
					BEGIN(DEDENT0);
				}
			}
			
[ ]		{;}

<<EOF>> {calcIndentation(indentStack, &indexTop, 0); yyterminate();}
%%

void calcIndentation(int* indentStack, int* indexTop, int len)
{
	if( len > indentStack[*indexTop] )
	{
		(*indexTop)++;
		indentStack[*indexTop] = len;
		printf("INDENT(%d->%d)\n", indentStack[(*indexTop)-1], indentStack[(*indexTop)]);
	}
	else if( len < indentStack[*indexTop])
	{
		int dedentCount = *indexTop;
		while(len < indentStack[dedentCount])
			dedentCount--;
			
		if (len != indentStack[dedentCount])
			printf("Error: inconsistent dedent %d\n", len);
		else
		{
			while(*indexTop > dedentCount)
			{
				printf("DEDENT(%d->%d)\n", indentStack[*indexTop], indentStack[(*indexTop)-1]);
				(*indexTop)--;
			}
		}
	}		
}

int main(int argc, char *argv[])
{
	yyin = fopen(argv[1], "r");
	yylex();
	return 0;
}